package Analizadores; 
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import Clases.nodos;
import metodo_arbol.funciones;
import javax.swing.JOptionPane;


parser code 
{:
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 

    // Guarda el error Sintactico
    public void syntax_error(Symbol s){ 
        System.err.println("Error Sintáctico en la Línea " + (s.left) + " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        JOptionPane.showMessageDialog(null, "No se esperaba este componente: " +s.value + "\nNo olvides colocar punto para las uniones", "Error", JOptionPane.ERROR_MESSAGE);
    } 
:} 

// Expresiones regulares
terminal String ID;


// Simbolos
terminal String PAR_IZQ;
terminal String PAR_DER;
terminal String ASTERISCO;
terminal String MAS;
terminal String INTERROGACION;
terminal String PUNTO;
terminal String ALTER;
terminal String ACEPTACION;


// No terminales
non terminal ini;
non terminal union;
non terminal hoja;
non terminal gramatica;
non terminal hojafinal;

precedence left ALTER;
precedence left PUNTO;
precedence left ASTERISCO,INTERROGACION,MAS;


start with ini; 

ini::= 
    PAR_IZQ union:valor1 PAR_DER PUNTO hojafinal:valor2     {:nodos temp = new nodos("Concatenación", "."); funciones.crearUnion(temp, valor1, valor2);:}
;

hoja::=
    ID:val              {:nodos temp = new nodos("hoja", val); RESULT=temp; funciones.crearHoja(temp);:}
;

hojafinal::=
    ACEPTACION:val    {:nodos temp = new nodos("hoja", val); RESULT=temp; funciones.crearHoja(temp);:}
;

union::=
    union:valor1 ALTER union:valor2                     {:nodos temp = new nodos("Operador de alternancia", "|"); RESULT=temp; funciones.crearUnion(temp, valor1, valor2); :}
    | PAR_IZQ union:valor1 ALTER union:valor2 PAR_DER   {:nodos temp = new nodos("Operador de alternancia", "|"); RESULT=temp; funciones.crearUnion(temp, valor1, valor2); :}
    
    // Concatenacion
    | union:valor1 PUNTO union:valor2                   {:nodos temp = new nodos("Concatenación", "."); RESULT=temp; funciones.crearUnion(temp, valor1, valor2);:}
    | PAR_IZQ union:valor1 PUNTO union:valor2 PAR_DER   {:nodos temp = new nodos("Concatenación", "."); RESULT=temp; funciones.crearUnion(temp, valor1, valor2);:}
    
    // Uno o mas
    | union:valor1 MAS                                  {:nodos temp = new nodos("Operador uno o mas", "+"); RESULT=temp; funciones.conectarNodo(temp, valor1);:} 
    | PAR_IZQ union:valor1 MAS PAR_DER                  {:nodos temp = new nodos("Operador uno o mas", "+"); RESULT=temp; funciones.conectarNodo(temp, valor1);:} 
    
    // cero o uno
    | union:valor1 INTERROGACION                        {:nodos temp = new nodos("Operador cero o uno", "?"); RESULT=temp; funciones.conectarNodo(temp, valor1);:}        
    | PAR_IZQ union:valor1 INTERROGACION PAR_DER        {:nodos temp = new nodos("Operador cero o uno", "?"); RESULT=temp; funciones.conectarNodo(temp, valor1);:} 

    // Cerradura de kleene
    | union:valor1 ASTERISCO                            {:nodos temp = new nodos("Operador cero o mas", "*"); RESULT=temp; funciones.conectarNodo(temp, valor1);:}   
    | PAR_IZQ  union:valor1 ASTERISCO PAR_DER           {:nodos temp = new nodos("Operador cero o mas", "*"); RESULT=temp; funciones.conectarNodo(temp, valor1);:} 
    
    | hoja:val                                          {:RESULT=val;:}
    | PAR_IZQ hoja:val PAR_DER                          {:RESULT=val;:}
;
